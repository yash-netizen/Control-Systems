mask_path = []
for root, dirs, files in os.walk('D:\project\dataset\RGB_color_image_masks\RGB_color_image_masks'):
    #iterate over 1000 masks
    for file in files:
        # obtain the path
        path = os.path.join(root,file)
        # add path to the list
        mask_path.append(path)
len(mask_path)

mask_path.sort()
image_path.sort()

def create_unet_model(input_shape, OUTPUT_CLASSES):
    def unet_model(output_channels:int):
        inputs = tf.keras.layers.Input(shape=input_shape)
#         inputs = tf.keras.layers.Rescaling(1/255.0)(inputs)
        # Downsampling through the model
        skips = down_stack(inputs)
        x = skips[-1]
        skips = reversed(skips[:-1])

        # Upsampling and establishing the skip connections
        for up, skip in zip(up_stack, skips):
            x = up(x)
            concat = tf.keras.layers.Concatenate()
            x = concat([x, skip])

        # This is the last layer of the UNET model
        x = tf.keras.layers.Conv2DTranspose(filters=100,
                                            kernel_size=3,
                                            strides=2,
                                            padding='same')(x)
        # Extra layer after the UNET to help with smoothing the output
        x = tf.keras.layers.Conv2D(filters=OUTPUT_CLASSES,
                                   kernel_size=3,
                                   strides=1,
                                   padding='same',
                                   activation="sigmoid"
                                   )(x)
        return tf.keras.Model(inputs=inputs, outputs=x)

    base_model = tf.keras.applications.MobileNetV2(input_shape=input_shape, include_top=False)
    # Use the activations of these layers
    layer_names = [
        'block_1_expand_relu',
        'block_3_expand_relu',
        'block_6_expand_relu',
        'block_13_expand_relu',
        'block_16_project',
    ]
    base_model_outputs = [base_model.get_layer(name).output for name in layer_names]
    # Create the feature extraction model
    down_stack = tf.keras.Model(inputs=base_model.input, outputs=base_model_outputs)
    down_stack.trainable = False

    up_stack = [
        pix2pix.upsample(512, 3),  # 4x4 -> 8x8
        pix2pix.upsample(256, 3),  # 8x8 -> 16x16
        pix2pix.upsample(128, 3),  # 16x16 -> 32x32
        pix2pix.upsample(64, 3),   # 32x32 -> 64x64
    ]

    return unet_model(output_channels=OUTPUT_CLASSES)
