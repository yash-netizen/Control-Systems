segmentation_keys = {
        "102,102,156":0,
        "107,142,35":1,
        "0,102,0":2,
        "112,103,87":3,
        "128,64,128":4,
        "48,41,30":5,
        "102,51,0":6,
        "130,76,0":7,
        "70,70,70":8,
        "28,42,168":9,
        "254,228,12":10,
        "255,22,96":11,
        "119,11,32":12,
        "112,150,146":13,
        "51,51,0":14,
        "190,250,190":15,
        "2,135,115":16,
        "0,0,0":17,
        "190,153,153":18,
        "9,143,150":19,
        "0,50,89":20,
        "254,148,12":21,
        "153,153,153":22
    }

from PIL import Image
def unique_colors(image_path):
    # Load the image
    img = Image.open(image_path).convert('RGB')
    
    # Resize the image to reduce the amount of data
    img.thumbnail((256,256), Image.NEAREST)
    
    # Use a set to find unique colors
    unique_colors = set(img.getdata())
    
    return unique_colors

# Specify the path to your segmentation mask image
unique = set()
for image_path in tqdm(mask_path):
    for u in unique_colors(image_path):
        unique.add(u)
print(unique)

images = []
# iterate over 1000 image paths
for path in tqdm(image_path):
    # read file
    file = tf.io.read_file(path)
    # decode png file into a tensor
    image = tf.image.decode_png(file, channels=3, dtype=tf.uint8)
    image = tf.cast(image, tf.float32)
    image = image/255.0
    # resize image
    image = tf.image.resize(image, (128,128))
    # append to the list
    images.append(image)

# create a list to store masks
masks = []
# iterate over 1000 mask paths
for path in tqdm(mask_path):
    # read the file
    file = tf.io.read_file(path)
    # decode png file into a tensor
    mask = tf.image.decode_png(file, channels=1, dtype=tf.uint8)
    mask = tf.cast(mask, tf.float32)
    mask = mask/255.0
    # resize image
    mask = tf.image.resize(mask, (128,128))
    # append mask to the list
    masks.append(mask)
